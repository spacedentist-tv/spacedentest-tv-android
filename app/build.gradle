apply plugin: 'com.android.application'
apply plugin: 'jacoco-android'

def VERSION = System.getenv('TRAVIS_TAG') ?: '0.0.0'
def BUILD_NUMBER = System.getenv('TRAVIS_BUILD_NUMBER') ?: '0'

def getVersionCode = { version, build ->
    def version_split = version.tokenize('.')

    return version_split[0].toInteger() * 134217728 + // major
            version_split[1].toInteger() * 2097152 + // minor
            version_split[2].toInteger() * 32768 + // patch
            build.toInteger() * 16
}

def getVersionName = { version, build ->
    return "$version.$build"
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.0"

    defaultConfig {
        applicationId "tv.spacedentist.android"
        minSdkVersion 9
        targetSdkVersion 25
        versionCode getVersionCode(VERSION, BUILD_NUMBER)
        versionName getVersionName(VERSION, BUILD_NUMBER)
        buildConfigField "String", "CHROMECAST_APP_NAMESPACE", '"urn:x-cast:tv.spacedentist.cast"'
        jackOptions {
            enabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    signingConfigs {
        release {
            storeFile = file('../releasekey.jks')
            storePassword = System.getenv('RELEASE_KEY_PASSWORD')
            keyAlias = System.getenv('RELEASE_KEY_ALIAS')
            keyPassword = System.getenv('RELEASE_KEY_PASSWORD')
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            applicationIdSuffix ".debug"
        }
    }
    productFlavors {
        stag {
            applicationId "tv.spacedentist.android.stag"
            buildConfigField "String", "CHROMECAST_APP_ID", '"E7EFD798"'
        }
        prod {
            buildConfigField "String", "CHROMECAST_APP_ID", '"CBEF7615"'
        }
    }
    lintOptions {
        abortOnError false
    }
}

android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        if (variant.getBuildType().name == "release") {
            // add the version number to all output files
            def file = output.outputFile
            output.outputFile = new File(
                    file.parent,
                    file.name.replace(".apk", "-" + variant.versionName + ".apk")
            )
        }
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:25.0.0'
    compile 'com.android.support:support-v4:25.0.0'
    compile 'com.android.support:mediarouter-v7:25.0.0'
    compile 'com.google.android.gms:play-services-cast:9.8.0'

    // dependency injection
    compile 'com.google.dagger:dagger:2.7'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.7'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
}
