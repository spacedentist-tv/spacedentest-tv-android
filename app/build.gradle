plugins {
    id 'com.android.application'
    id 'jacoco-android'
}

def VERSION = System.getenv('TRAVIS_TAG') ?: '0.0.0'
def BUILD_NUMBER = System.getenv('TRAVIS_BUILD_NUMBER') ?: '0'

def getVersionCode = { version, build ->
    def version_split = version.tokenize('.')

    return version_split[0].toInteger() * 134217728 + // major
            version_split[1].toInteger() * 2097152 + // minor
            version_split[2].toInteger() * 32768 + // patch
            build.toInteger() * 16
}

def getVersionName = { version, build ->
    return "$version.$build"
}

android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "tv.spacedentist.android"
        minSdkVersion 14
        targetSdkVersion 28
        versionCode getVersionCode(VERSION, BUILD_NUMBER)
        versionName getVersionName(VERSION, BUILD_NUMBER)
        buildConfigField "String", "CHROMECAST_APP_NAMESPACE", '"urn:x-cast:tv.spacedentist.cast"'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    signingConfigs {
        release {
            storeFile = file('../releasekey.jks')
            storePassword = System.getenv('RELEASE_KEY_PASSWORD')
            keyAlias = System.getenv('RELEASE_KEY_ALIAS')
            keyPassword = System.getenv('RELEASE_KEY_PASSWORD')
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            applicationIdSuffix ".debug"
        }
    }
    flavorDimensions "market"
    productFlavors {
        stag {
            dimension "market"
            applicationId "tv.spacedentist.android.stag"
            buildConfigField "String", "CHROMECAST_APP_ID", '"E7EFD798"'
        }
        prod {
            dimension "market"
            buildConfigField "String", "CHROMECAST_APP_ID", '"CBEF7615"'
        }
    }
}

android.applicationVariants.all { variant ->
    variant.outputs.all { output ->
        if (variant.getBuildType().name == "release") {
            // add the version number to all output files
            output.outputFileName = output.outputFileName.replace(".apk", "-" + variant.versionName + ".apk")
        }
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.mediarouter:mediarouter:1.0.0'
    implementation 'androidx.transition:transition:1.0.0'
    implementation 'androidx.annotation:annotation:1.0.0'
    implementation 'com.google.android.gms:play-services-cast-framework:16.0.3'

    // dependency injection
    implementation 'com.google.dagger:dagger-android:2.16'
    implementation 'com.google.dagger:dagger-android-support:2.16' // if you use the support libraries
    annotationProcessor 'com.google.dagger:dagger-android-processor:2.16'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.16'

    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0-beta01'
    androidTestImplementation 'androidx.test:rules:1.1.0-beta01'
    androidTestImplementation 'org.mockito:mockito-android:2.6.3'
}
